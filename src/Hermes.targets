<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<Import Project="$(SolutionDir)nuget\NuGet.targets" Condition="Exists('$(SolutionDir)nuget\NuGet.targets')" />

	<!-- Override package version if specified as an msbuild property -->
	<PropertyGroup>
		<BuildCommand Condition="'$(_PackageVersion)' != ''">$(BuildCommand) -Version $(_PackageVersion)</BuildCommand>
	</PropertyGroup>	
	
	<Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild">
		<PropertyGroup>
			<ErrorText>This project references NuGet package(s) that are missing on this computer. Enable NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
		</PropertyGroup>
		<Error Condition="!Exists('$(SolutionDir)nuget\NuGet.targets')" Text="$([System.String]::Format('$(ErrorText)', '$(SolutionDir)nuget\NuGet.targets'))" />
	</Target>

	<!-- Generate VersionInfo.cs -->
	<PropertyGroup>
		<CompileDependsOn>
			GenerateVersionInfo;
			$(CompileDependsOn);
		</CompileDependsOn>
	</PropertyGroup>

	<ItemGroup>
		<DynamicVersionInfo Include="@(Version -> '$(IntermediateOutputPath)VersionInfo.g.cs')">
			<InProject>false</InProject>
		</DynamicVersionInfo>
	</ItemGroup>

	<!-- Specific version override received as the /p:Version={version} MSBuild property. -->
	<Target Name="UpdateVersionInfo" Condition="'$(_Version)' != '' And '@(Version)' != ''">

		<!-- Let MSBuild batching do its job -->
		<_UpdateVersionInfo Version="$(_Version)" Target="@(Version)" />

	</Target>
	
	<Target Name="GenerateVersionInfo"
			DependsOnTargets="UpdateVersionInfo"
			Condition="'@(Version)' != ''"
            Inputs="@(Version)"
            Outputs="@(DynamicVersionInfo)">

		<!-- Let MSBuild batching do its job -->
		<_CreateVersionInfo Source="@(Version)" Target="@(DynamicVersionInfo)" />

		<ItemGroup>
			<Compile Include="@(DynamicVersionInfo)" />
			<FileWrites Include="@(DynamicVersionInfo)" />
		</ItemGroup>

	</Target>

	<UsingTask TaskName="_UpdateVersionInfo" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
		<ParameterGroup>
			<Version Required="true" />
			<Target Required="true" />
		</ParameterGroup>
		<Task>
			<Using Namespace="System.IO"/>
			<Using Namespace="System.Text.RegularExpressions"/>
			<Code Type="Fragment" Language="cs">
				<![CDATA[
			var assembly = Version.IndexOf('-') != -1 ?
				Version.Substring(0, Version.IndexOf('-')) :
				Version;

			File.WriteAllText(Target, string.Format(
@"AssemblyVersion={0} 
FileVersion={0}
PackageVersion={1}", assembly, Version));
]]>
			</Code>
		</Task>
	</UsingTask>

	<UsingTask TaskName="_CreateVersionInfo" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
		<ParameterGroup>
			<Source Required="true" />
			<Target Required="true" />
		</ParameterGroup>
		<Task>
			<Using Namespace="System.IO"/>
			<Using Namespace="System.Text.RegularExpressions"/>
			<Code Type="Fragment" Language="cs">
				<![CDATA[
				var version = File.ReadAllText(Source);
				
				var assembly = Regex.Match(version, "(?<=AssemblyVersion=).*$", RegexOptions.Multiline).Value.Trim();
				var file = Regex.Match(version, "(?<=FileVersion=).*$", RegexOptions.Multiline).Value.Trim();
				var package = Regex.Match(version, "(?<=PackageVersion=).*$", RegexOptions.Multiline).Value.Trim();

				File.WriteAllText(Target, string.Format(@"using System.Reflection;

[assembly: AssemblyVersion(""{0}"")]
[assembly: AssemblyFileVersion(""{1}"")]
[assembly: AssemblyInformationalVersion(""{2}"")]",
					assembly, file, package));
]]>
			</Code>
		</Task>
	</UsingTask>
</Project>
